/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import java.awt.Color;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author luck
 */
public class Mobiliario extends javax.swing.JFrame {

    String data[][]={};
    String cabecera[]={"Nombre","Descripcion","Existencia","Costo","Status"};
    String user,rol;
    DefaultTableModel table;
    Connection miConexion;
    int iduser;
    Mysqlconector conexion = new Mysqlconector();
    Screensize pantalla = new Screensize();
    public Mobiliario(String usuario,String role){
        try {
            user=usuario;
            rol=role;           
            initComponents();

            this.getContentPane().setBackground(Color.lightGray);
            //declarar hidden el input que creamos para status
            //lista de producto activos
            table= new DefaultTableModel(data,cabecera);
            tabla.setModel(table);
            this.Estado.setText("A");
             miConexion = conexion.Connection().getConnection();
            // TODO add your handling code here:
            String query ="SELECT nombre,descripcion,existencia,costo,status FROM producto WHERE status='A' ";         
            // create the java statement
            Statement st = miConexion.createStatement();
            ResultSet rs = st.executeQuery(query);
            //checamos que haya usuarios correctos       
            int cont=0;
            while(rs.next()){
                String datos[]={rs.getString("nombre"),rs.getString("descripcion"),rs.getString("existencia"),rs.getString("costo"),rs.getString("status")};
                table.addRow(datos);
                // cont++;
            }
            
            //restricciones para usuarios que no sean el admin
            if(!role.equals("administrador")){
                this.borrar.setEnabled(false);
            }
            this.Estado.setEnabled(false);
        } catch (SQLException ex) {
            Logger.getLogger(Mobiliario.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            Mysqlconector.liberaConexion(miConexion);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Nombre = new javax.swing.JTextField();
        Cantidad = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Precio = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Descripcion = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        save = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        busqueda = new javax.swing.JTextField();
        busque = new javax.swing.JButton();
        nuevo = new javax.swing.JButton();
        editar = new javax.swing.JButton();
        borrar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        Estado = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nombre: ");

        jLabel2.setText("Existencia");

        Nombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NombreKeyTyped(evt);
            }
        });

        Cantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CantidadKeyTyped(evt);
            }
        });

        jLabel3.setText("Precio");

        Precio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PrecioKeyTyped(evt);
            }
        });

        jLabel4.setText("Descripcion");

        Descripcion.setColumns(20);
        Descripcion.setRows(5);
        Descripcion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                DescripcionKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(Descripcion);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/regresa_01.jpg"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/guardar.png"))); // NOI18N
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        tabla.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tablaKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablaKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tabla);

        busque.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/buscar.jpeg"))); // NOI18N
        busque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busqueActionPerformed(evt);
            }
        });

        nuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/nuevo.png"))); // NOI18N
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });

        editar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/editar.png"))); // NOI18N
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });

        borrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/eliminar.png"))); // NOI18N
        borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarActionPerformed(evt);
            }
        });

        jLabel5.setText("Estado");

        jLabel7.setText("Multibusqueda");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel1)
                        .addGap(12, 12, 12)
                        .addComponent(Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(Precio, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel2)
                        .addGap(28, 28, 28)
                        .addComponent(Cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel5)
                        .addGap(26, 26, 26)
                        .addComponent(Estado, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jLabel7)
                        .addGap(40, 40, 40)
                        .addComponent(busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(busque, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(editar, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                            .addComponent(borrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Precio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Estado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel7))
                            .addComponent(busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(nuevo)
                                .addGap(50, 50, 50)
                                .addComponent(editar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(borrar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(busque, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Administrador a = new Administrador(user,rol);
        a.setVisible(true);
        a.setBounds((pantalla.ancho / 2) - (a.getWidth() / 2), (pantalla.alto / 2) - (a.getHeight() / 2),a.getWidth(),a.getHeight());
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
private int validaciones(){
       boolean valid;
       valid = Validaciones.validatePrecio(this.Precio.getText());
          if(Nombre.getText().equals("")||Descripcion.getText().equals("")||Cantidad.getText().equals("")||Precio.getText().equals(""))    
                return 1;
                   
          if(!valid)                    
                return 2;
            
       return 0;
   }
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        //para evitar error que eligan editar en vez de guardar uno nuevo       
         int fila = tabla.getSelectedRow();
            if(fila!=-1){
                  JOptionPane.showMessageDialog(null,"Seleccione un nuevo Producto e intentelo de nuevo correctamente'","Error Guardar",JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(validaciones()==1){
                   JOptionPane.showMessageDialog(null,"Error algunos datos son necesarios favor de ingresarlos","Error guardar",JOptionPane.ERROR_MESSAGE);                 
                   return;
            }
            if(validaciones()==2){
                   JOptionPane.showMessageDialog(null, "Precio no valido ingreselo correctamente","Error Email",JOptionPane.ERROR_MESSAGE);
                   return;
            }
            //evitar usuarios repetidos
                 try{
                    String query="SELECT nombre FROM producto WHERE nombre='"+Nombre.getText()+"' AND status ='A' ";
                     miConexion = conexion.Connection().getConnection();
                    Statement sta = miConexion.createStatement();
                    ResultSet resul = sta.executeQuery(query);
                  //while(rs.next()){  
                    if(resul.next()){
                       JOptionPane.showMessageDialog(null,"Error este Producto ya esta registrado","Error guardar",JOptionPane.ERROR_MESSAGE);
                    }else{
                          
                            String queryinsert="INSERT INTO producto (nombre,descripcion,existencia,costo,status) "
                                    + " VALUES ('"+this.Nombre.getText()+"','"+this.Descripcion.getText()+"','"+this.Cantidad.getText()+"'"
                                    + ",'"+this.Precio.getText()+"','"+this.Estado.getText()+"')";
                            
                            Statement st = miConexion.createStatement();
                            int cont = st.executeUpdate(queryinsert);

                            if(cont==1){
                                JOptionPane.showMessageDialog(null,"El Producto se ha guardado correctamente");
                                actualizar();
                            }else{
                                JOptionPane.showMessageDialog(null,"Error al intentar guardar intentelo de nuevo","Error guardar",JOptionPane.ERROR_MESSAGE);
                            }
                       }
               
                    } catch (SQLException ex) {
                         Logger.getLogger(Usuarios.class.getName()).log(Level.SEVERE, null, ex);
                    }finally{
                     Mysqlconector.liberaConexion(miConexion);
                    }
       
    }//GEN-LAST:event_saveActionPerformed

    private void tablaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaKeyTyped
        // TODO add your handling code here:     
    }//GEN-LAST:event_tablaKeyTyped

    private void tablaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaKeyPressed
        // TODO add your handling code here:        
    }//GEN-LAST:event_tablaKeyPressed

    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        // TODO add your handling code here:
       if(!rol.equals("administrador"))
               this.Cantidad.setEditable(false);
            
              int filasele=tabla.getSelectedRow();
                  this.Nombre.setText(tabla.getValueAt(filasele, 0).toString());
                  this.Descripcion.setText(tabla.getValueAt(filasele, 1).toString());
                  this.Cantidad.setText(tabla.getValueAt(filasele, 2).toString());
                  this.Precio.setText(tabla.getValueAt(filasele, 3).toString());
                //fecha
                 // this.date.setDateFormatString(tabla.getValueAt(filasele, 4).toString());
                  this.Estado.setText(tabla.getValueAt(filasele, 4).toString());
              try {
                  iduser=0;
                  // TODO add your handling code here:
                   miConexion = conexion.Connection().getConnection();
                  String query ="SELECT id_producto FROM producto WHERE nombre= '"+this.Nombre.getText()+"' ";
                  // create the java statement
                  Statement st = miConexion.createStatement();
                  ResultSet rs = st.executeQuery(query);

                  if(rs.next()){
                      iduser=Integer.parseInt(rs.getString("id_producto"));
                  }
            
              } catch (SQLException ex) {
                  Logger.getLogger(Usuarios.class.getName()).log(Level.SEVERE, null, ex);
              }finally{
                  Mysqlconector.liberaConexion(miConexion);
              }
        
    }//GEN-LAST:event_tablaMouseClicked

    private void busqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busqueActionPerformed
        // TODO add your handling code here:
        limpiarcampos();
        LimpiarJTable();
        try {
            
             miConexion = conexion.Connection().getConnection();
            // TODO add your handling code here:
            String query ="SELECT nombre,descripcion,existencia,costo,status FROM producto WHERE status='A' AND (nombre LIKE '%"+this.busqueda.getText()+"%' "
                    + "OR descripcion LIKE '%"+this.busqueda.getText()+"%' OR existencia LIKE '%"+this.busqueda.getText()+"%' "
                    + "OR costo LIKE '%"+this.busqueda.getText()+"%' ) ";
         
            // create the java statement
            Statement st = miConexion.createStatement();
            ResultSet rs = st.executeQuery(query);
            
            while(rs.next()){
              String datos[]={rs.getString("nombre"),rs.getString("descripcion"),rs.getString("existencia"),rs.getString("costo"),rs.getString("status")};
                table.addRow(datos);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(Usuarios.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            Mysqlconector.liberaConexion(miConexion);
        }
    }//GEN-LAST:event_busqueActionPerformed

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        // TODO add your handling code here:
        //Saber si eligio usuario y es update
       int fila = tabla.getSelectedRow();
            if(fila==-1){
                JOptionPane.showMessageDialog(null,"Seleccione Producto a modificar intentelo de nuevo correctamente","Update Error",JOptionPane.ERROR_MESSAGE);
                return;
            }
             if(validaciones()==1){
                   JOptionPane.showMessageDialog(null,"Error algunos datos son necesarios favor de ingresarlos","Error guardar",JOptionPane.ERROR_MESSAGE);                 
                   return;
             }
             if(validaciones()==2){
                   JOptionPane.showMessageDialog(null, "Precio no valido ingreselo correctamente","Error Email",JOptionPane.ERROR_MESSAGE);
                   return;
             }
             int mensaje=JOptionPane.showConfirmDialog(null,"Estas seguro que deseas Modificar este usuario?");
             if(mensaje==JOptionPane.YES_OPTION){
                try {
                  // TODO add your handling code here:
                     //actualizar o modificar elregistro seleccionado
                      String queryupdate="UPDATE producto SET nombre='"+this.Nombre.getText()+"',descripcion='"+this.Descripcion.getText()+"',"
                              + "existencia='"+this.Cantidad.getText()+"',costo='"+this.Precio.getText()+"', "
                              + "status='"+this.Estado.getText()+"' WHERE id_producto="+iduser+"";  
                      //executar el query
                      
                      miConexion = conexion.Connection().getConnection();
                      Statement st = miConexion.createStatement();
                      int cant = st.executeUpdate(queryupdate);

                      if (cant==1){
                          JOptionPane.showMessageDialog(null,"Se ha modificado correctamente");
                          limpiarcampos();
                          actualizar();
                      }else{
                           JOptionPane.showMessageDialog(null,"No se encontro Producto intente de nuevo correctamente'","Error update",JOptionPane.ERROR_MESSAGE);
                      }
             
                } catch (SQLException ex) {
                  Logger.getLogger(Usuarios.class.getName()).log(Level.SEVERE, null, ex);
                }finally{
                    Mysqlconector.liberaConexion(miConexion);
                }
            }
        
    }//GEN-LAST:event_editarActionPerformed

    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        // TODO add your handling code here:                
        tabla.clearSelection();
        limpiarcampos();
    }//GEN-LAST:event_nuevoActionPerformed

    private void borrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarActionPerformed
        // TODO add your handling code here:
             //
            int fila = tabla.getSelectedRow();
            if(fila==-1){
                JOptionPane.showMessageDialog(null,"Seleccione un Mobiliario ha eliminar e intente de nuevo correctamente'","Error Delete",JOptionPane.ERROR_MESSAGE);
                return;
            }
            int mensaje=JOptionPane.showConfirmDialog(null,"Estas seguro que deseas eliminar este Producto?");
              if(mensaje==JOptionPane.YES_OPTION){
                       try {
                           // TODO add your handling code here:
     
                           String queryDelete="UPDATE producto SET status='B' WHERE id_producto='"+iduser+"' ";
                           miConexion = conexion.Connection().getConnection();
                           Statement st = miConexion.createStatement();
                           int cant = st.executeUpdate(queryDelete);
                           if(cant==1){
                                JOptionPane.showMessageDialog(null,"Se ha eliminado Producto correctamente");
                                 limpiarcampos();
                                actualizar();
                           }else{
                                JOptionPane.showMessageDialog(null,"No se encontro Producto intente de nuevo correctamente'","Error Delete",JOptionPane.ERROR_MESSAGE);
                           }
                    
                       } catch (SQLException ex) {
                           Logger.getLogger(Usuarios.class.getName()).log(Level.SEVERE, null, ex);
                       }finally{
                           Mysqlconector.liberaConexion(miConexion);
                       }
               }
        
    }//GEN-LAST:event_borrarActionPerformed

    private void NombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NombreKeyTyped
        // TODO add your handling code here:
         char c=evt.getKeyChar();
          String cadena= this.Nombre.getText();
          if(cadena.length()>99) {
             
              evt.consume();
              
              JOptionPane.showMessageDialog(null,"Longitu maxima de 100 caracteres","Error Validacion",JOptionPane.ERROR_MESSAGE);
              
          }
        
          if(Character.isDigit(c)) {
              getToolkit().beep();
              
              evt.consume();
              
              JOptionPane.showMessageDialog(null,"Ingresa solo Letras","Error Validacion",JOptionPane.ERROR_MESSAGE);
              
          }
          else if((int)evt.getKeyChar()>32 && (int)evt.getKeyChar()<=47
                    ||(int)evt.getKeyChar()>=58 && (int)evt.getKeyChar()<=64
                    || (int)evt.getKeyChar()>=91 && (int)evt.getKeyChar()<=96
                    || (int)evt.getKeyChar()>=123 && (int)evt.getKeyChar()<=255)
           {
                getToolkit().beep();
                evt.consume();
                JOptionPane.showMessageDialog(this, "Ingrese solo Letras","Error Validacion",JOptionPane.ERROR_MESSAGE);
                Nombre.setCursor(null);
           }
    }//GEN-LAST:event_NombreKeyTyped

    private void CantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CantidadKeyTyped
        // TODO add your handling code here:
        char c=evt.getKeyChar();
        String cadena=this.Cantidad.getText();    
          if(cadena.length()>9) {
             
              evt.consume();
              
              JOptionPane.showMessageDialog(null,"Longitu maxima de 10 digitos","Error Validacion",JOptionPane.ERROR_MESSAGE);
              
          }
          if(Character.isLetter(c))
            {
                getToolkit().beep();
                evt.consume();
                JOptionPane.showMessageDialog(this, "Ingrese solo numeros","Error Validacion",JOptionPane.ERROR_MESSAGE);
                Cantidad.setCursor(null);
            }
            else if(c>32 &&c<=47||c>=58 && c<=64|| c>=91 && c<=96||c>=123 && c<=255)
           {
                getToolkit().beep();
                evt.consume();
                JOptionPane.showMessageDialog(this, "Ingrese solo numeros","Error Validacion",JOptionPane.ERROR_MESSAGE);
                Cantidad.setCursor(null);
            }
    }//GEN-LAST:event_CantidadKeyTyped
//validar precio
    private void PrecioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PrecioKeyTyped
        // TODO add your handling code here:
        char c=evt.getKeyChar();
          String cadena= this.Precio.getText();
          if(cadena.length()>11) {
             
              evt.consume();
              
              JOptionPane.showMessageDialog(null,"Longitu maxima de 12 caracteres","Error Validacion",JOptionPane.ERROR_MESSAGE);
              
          }
    }//GEN-LAST:event_PrecioKeyTyped

    private void DescripcionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DescripcionKeyTyped
        // TODO add your handling code here:
        char c=evt.getKeyChar();
          String cadena= this.Descripcion.getText();
          if(cadena.length()>99) {
             
              evt.consume();
              
              JOptionPane.showMessageDialog(null,"Longitu maxima de 100 caracteres","Error Validacion",JOptionPane.ERROR_MESSAGE);
              
          }
        
          if(Character.isDigit(c)) {
              getToolkit().beep();
              
              evt.consume();
              
              JOptionPane.showMessageDialog(null,"Ingresa solo Letras","Error Validacion",JOptionPane.ERROR_MESSAGE);
              
          }
          else if((int)evt.getKeyChar()>32 && (int)evt.getKeyChar()<=47
                    ||(int)evt.getKeyChar()>=58 && (int)evt.getKeyChar()<=64
                    || (int)evt.getKeyChar()>=91 && (int)evt.getKeyChar()<=96
                    || (int)evt.getKeyChar()>=123 && (int)evt.getKeyChar()<=255)
           {
                getToolkit().beep();
                evt.consume();
                JOptionPane.showMessageDialog(this, "Ingrese solo Letras","Error Validacion",JOptionPane.ERROR_MESSAGE);
                Descripcion.setCursor(null);
           }
    }//GEN-LAST:event_DescripcionKeyTyped
 public void LimpiarJTable(){
        int a =table.getRowCount()-1;  //Índices van de 0 a n-1
        //System.out.println("Tabla "+a);   //Para mostrar por consola el resultado
        for(int i=a;i>=0;i--){ 

            //System.out.println("i "+i);    //Para mostrar por consola el resultado
            table.removeRow(i);
        }
   }
  
    private void limpiarcampos(){
        if(!rol.equals("administrador"))
              this.Cantidad.setEditable(true);
        
        this.Nombre.setText("");
        this.Descripcion.setText("");
        this.Precio.setText("");
        this.Cantidad.setText("");
        this.Estado.setText("A");
    }
    private void actualizar(){
        
        LimpiarJTable();
    
            String query="SELECT nombre,descripcion,existencia,costo,status FROM producto WHERE status='A' ";
        try {
           
            Statement st = miConexion.createStatement();
            ResultSet rs = st.executeQuery(query);
            while(rs.next()){
                String datos[]={rs.getString("nombre"),rs.getString("descripcion"),rs.getString("existencia"),rs.getString("costo"),rs.getString("status")};
                table.addRow(datos);
            }
        
        } catch (SQLException ex) {
            Logger.getLogger(Usuarios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mobiliario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
               // new Mobiliario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Cantidad;
    private javax.swing.JTextArea Descripcion;
    private javax.swing.JTextField Estado;
    private javax.swing.JTextField Nombre;
    private javax.swing.JTextField Precio;
    private javax.swing.JButton borrar;
    private javax.swing.JButton busque;
    private javax.swing.JTextField busqueda;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton editar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton nuevo;
    private javax.swing.JButton save;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables
}
